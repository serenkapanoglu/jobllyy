{"ast":null,"code":"var _jsxFileName = \"/Users/serenkapanoglu/Desktop/seren-job-searchh/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Nav from \"./routes-nav/Nav\";\nimport Routes from \"./routes-nav/Routes\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport JoblyApi from \"./api/api\";\nimport UserContext from \"./auth/UserContext\";\n//import jwt from \"jsonwebtoken\";\nimport jwt_decode from 'jwt-decode';\n\n/* Name of the key for storing token in localStorage */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\n\n/* Top level app\ninfoLoaded controls LoadingSpinner rendering\ncurrentUser is the user object from the API and is passed using context */\nfunction App() {\n  _s();\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n  /* If there is a token, loads user info from API\n  If no token (not logged in), this will not run */\n  useEffect(function loadUserInfo() {\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let {\n            username\n          } = jwt_decode(token);\n          /* puts token on API class */\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          setApplicationIds(new Set(currentUser.applications));\n        } catch (e) {\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n\n    /* Sets infoLoaded back to false to get access to loading spinner while getCurrentUser runs\n     */\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  /* Handles logout */\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /* Handles signup\n  Logs in on signup */\n  async function signup(signupData) {\n    try {\n      let token = await JoblyApi.signup(signupData);\n      setToken(token);\n      return {\n        success: true\n      };\n    } catch (e) {\n      console.error(\"signup failed\", e);\n      return {\n        success: false,\n        e\n      };\n    }\n  }\n\n  /* Handles login */\n  async function login(loginData) {\n    try {\n      let token = await JoblyApi.login(loginData);\n      setToken(token);\n      return {\n        success: true\n      };\n    } catch (e) {\n      console.error(\"Login failed\", e);\n      return {\n        success: false,\n        e\n      };\n    }\n  }\n\n  /* Sees if job has been applied to */\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n\n  /* Applies to job and updates applicationIds */\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n  if (!infoLoaded) return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 27\n  }, this);\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n      value: {\n        currentUser,\n        setCurrentUser,\n        hasAppliedToJob,\n        applyToJob\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(Nav, {\n          logout: logout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Routes, {\n          login: login,\n          signup: signup\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Ng9XeEGleJG0v7XKSnyO4s4IuTM=\", false, function () {\n  return [useLocalStorage];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","useLocalStorage","Nav","Routes","LoadingSpinner","JoblyApi","UserContext","jwt_decode","jsxDEV","_jsxDEV","TOKEN_STORAGE_ID","App","_s","infoLoaded","setInfoLoaded","applicationIds","setApplicationIds","Set","currentUser","setCurrentUser","token","setToken","loadUserInfo","getCurrentUser","username","applications","e","logout","signup","signupData","success","console","error","login","loginData","hasAppliedToJob","id","has","applyToJob","fileName","_jsxFileName","lineNumber","columnNumber","children","Provider","value","class","_c","$RefreshReg$"],"sources":["/Users/serenkapanoglu/Desktop/seren-job-searchh/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Nav from \"./routes-nav/Nav\";\nimport Routes from \"./routes-nav/Routes\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport JoblyApi from \"./api/api\";\nimport UserContext from \"./auth/UserContext\";\n//import jwt from \"jsonwebtoken\";\nimport jwt_decode from 'jwt-decode';\n\n/* Name of the key for storing token in localStorage */\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\n\n/* Top level app\ninfoLoaded controls LoadingSpinner rendering\ncurrentUser is the user object from the API and is passed using context */\nfunction App() {\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n/* If there is a token, loads user info from API\nIf no token (not logged in), this will not run */\n  useEffect(function loadUserInfo() {\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let { username } = jwt_decode(token);\n          /* puts token on API class */\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          setApplicationIds(new Set(currentUser.applications));\n        } catch (e) {\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n\n/* Sets infoLoaded back to false to get access to loading spinner while getCurrentUser runs\n */\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  /* Handles logout */\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /* Handles signup\n  Logs in on signup */\n  async function signup(signupData) {\n    try {\n      let token = await JoblyApi.signup(signupData);\n      setToken(token);\n      return { success: true };\n    } catch (e) {\n      console.error(\"signup failed\", e);\n      return { success: false, e };\n    }\n  }\n\n  /* Handles login */\n  async function login(loginData) {\n    try {\n      let token = await JoblyApi.login(loginData);\n      setToken(token);\n      return { success: true };\n    } catch (e) {\n      console.error(\"Login failed\", e);\n      return { success: false, e };\n    }\n  }\n\n  /* Sees if job has been applied to */\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n\n  /* Applies to job and updates applicationIds */\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n\n\n  if (!infoLoaded) return <LoadingSpinner />;\n\n  return (\n    <BrowserRouter>\n      <UserContext.Provider\n        value={{ currentUser, setCurrentUser, hasAppliedToJob, applyToJob }}\n      >\n        <div class=\"App\">\n          <Nav logout={logout} />\n          <Routes login={login} signup={signup} />\n        </div>\n      </UserContext.Provider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}